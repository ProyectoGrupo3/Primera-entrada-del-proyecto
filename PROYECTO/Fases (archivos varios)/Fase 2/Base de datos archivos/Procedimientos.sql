--Procedimiento de Busqueda de todos los Trabajadores
CREATE OR REPLACE PROCEDURE BUSCAR_TOTAL_T (B OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN B FOR
  SELECT * FROM TTRABAJADOR;
END;
DROP PUBLIC SYNONYM BUSCAR_TRABAJADORES;
CREATE PUBLIC SYNONYM BUSCAR_TRABAJADORES FOR BUSCAR_TOTAL_T;


--Procedimiento de Busqueda de un Trabajador
CREATE OR REPLACE PROCEDURE BUSCAR_UN_TRABAJADOR ( ID_C IN TTRABAJADOR.CENTRO_TRABAJO_ID_CENTRO%TYPE,  UNO OUT NUMBER, DOS OUT VARCHAR2, TRES OUT VARCHAR2, CUATRO OUT VARCHAR2, CINCO OUT VARCHAR2, SEIS OUT VARCHAR2, SIETE OUT VARCHAR2, OCHO OUT VARCHAR2, NUEVE OUT VARCHAR2, DIEZ OUT VARCHAR2, ONCE OUT VARCHAR2, DOCE OUT NUMBER, TRECE OUT DATE, CATORCE OUT VARCHAR2, QUINCE OUT NUMBER)
IS
LINEA TTRABAJADOR%ROWTYPE;
BEGIN

  SELECT * INTO LINEA FROM TTRABAJADOR 
  WHERE CENTRO_TRABAJO_ID_CENTRO = ID_C;
  UNO:=LINEA.ID_TRABAJADOR;
  DOS:=LINEA.DNI;
  TRES:=LINEA.NOMBRE;
  CUATRO:=LINEA.APELLIDO_1;
  CINCO:=LINEA.APELLIDO_2;
  SEIS:=LINEA.CALLE;
  SIETE:=LINEA.PORTAL;
  OCHO:=LINEA.PISO;
  NUEVE:=LINEA.MANO;
  DIEZ:=LINEA.TELEFONO_PERSONAL;
  ONCE:=LINEA.MOVIL_EMPRESA;
  DOCE:=LINEA.SALARIO;
  TRECE:=LINEA.FECHA_NACIMIENTO;
  CATORCE:=LINEA.CATEGORIA;
  QUINCE:=LINEA.CENTRO_TRABAJO_ID_CENTRO;
  
  EXCEPTION 
  WHEN NO_DATA_FOUND THEN
  RAISE_APPLICATION_ERROR( -20000  , 'Error', TRUE);
  WHEN TOO_MANY_ROWS THEN
  RAISE_APPLICATION_ERROR( -20000  , 'Error', TRUE);
END;
DROP PUBLIC SYNONYM BUSCAR_UN_T;
CREATE PUBLIC SYNONYM BUSCAR_UN_T FOR BUSCAR_UN_TRABAJADOR;


/*--Procedimiento de comprobación del login de usuario
create or replace PROCEDURE COMPROBAR_LOGIN (USU IN VARCHAR2 , PASS IN VARCHAR2, V OUT number )
AS
LINEA TCLAVE%ROWTYPE;
BEGIN
  SELECT * INTO LINEA FROM TCLAVE
  WHERE USU = TCLAVE.USUARIO
  and TCLAVE.CONTRASENYA = PASS;
  IF LINEA.USUARIO = USU THEN
  V:= linea.trabajador_id_trabajador;
  END IF;
  EXCEPTION
      WHEN NO_DATA_FOUND THEN
      v:=0;
END;*/

--Procedimiento de comprobación del login de usuario
create or replace PROCEDURE COMPROBAR_LOGIN (USU IN VARCHAR2 , PASS IN VARCHAR2, CLAVE1 OUT NUMBER, CLAVE2 OUT VARCHAR2, CLAVE3 OUT VARCHAR2, CLAVE4 OUT DATE, CLAVE5 OUT NUMBER, UNO OUT NUMBER, DOS OUT VARCHAR2, TRES OUT VARCHAR2, CUATRO OUT VARCHAR2, CINCO OUT VARCHAR2, SEIS OUT VARCHAR2, SIETE OUT VARCHAR2, OCHO OUT VARCHAR2, NUEVE OUT VARCHAR2, DIEZ OUT VARCHAR2, ONCE OUT VARCHAR2, DOCE OUT NUMBER, TRECE OUT DATE, CATORCE OUT VARCHAR2, QUINCE OUT NUMBER, hay out number)
AS
LINEACLAVE TCLAVE%ROWTYPE;
LINEATRABAJADOR TTRABAJADOR%ROWTYPE;
ID_TRA NUMBER;

BEGIN

SELECT * INTO LINEACLAVE FROM TCLAVE
  WHERE USU = TCLAVE.USUARIO
  AND TCLAVE.CONTRASENYA = PASS;
  ID_TRA:= LINEACLAVE.TRABAJADOR_ID_TRABAJADOR;
  SELECT * INTO LINEATRABAJADOR FROM TTRABAJADOR
  WHERE ID_TRABAJADOR = ID_TRA;
  
  CLAVE1:= LINEACLAVE.ID_CLAVE;
  CLAVE2:= LINEACLAVE.USUARIO;
  CLAVE3:= LINEACLAVE.CONTRASENYA;
  CLAVE4:= LINEACLAVE.FECHA;
  CLAVE5:= LINEACLAVE.TRABAJADOR_ID_TRABAJADOR;
  UNO:=LINEATRABAJADOR.ID_TRABAJADOR;
  DOS:=LINEATRABAJADOR.DNI;
  TRES:=LINEATRABAJADOR.NOMBRE;
  CUATRO:=LINEATRABAJADOR.APELLIDO_1;
  CINCO:=LINEATRABAJADOR.APELLIDO_2;
  SEIS:=LINEATRABAJADOR.CALLE;
  SIETE:=LINEATRABAJADOR.PORTAL;
  OCHO:=LINEATRABAJADOR.PISO;
  NUEVE:=LINEATRABAJADOR.MANO;
  DIEZ:=LINEATRABAJADOR.TELEFONO_PERSONAL;
  ONCE:=LINEATRABAJADOR.MOVIL_EMPRESA;
  DOCE:=LINEATRABAJADOR.SALARIO;
  TRECE:=LINEATRABAJADOR.FECHA_NACIMIENTO;
  CATORCE:=LINEATRABAJADOR.CATEGORIA;
  QUINCE:=LINEATRABAJADOR.CENTRO_TRABAJO_ID_CENTRO;
  hay := 1;
  EXCEPTION 
  WHEN NO_DATA_FOUND THEN
  hay := 0;
  WHEN TOO_MANY_ROWS THEN
  hay := 0;
END;
DROP PUBLIC SYNONYM LOGIN;
CREATE PUBLIC SYNONYM LOGIN FOR COMPROBAR_LOGIN;


--INSERTAR O UPDATE TRABAJADOR
create or replace PROCEDURE  INSERT_Y_UPDATE_T(
P_T_ID TRABAJADOR.ID_TRABAJADOR%TYPE,
P_T_DNI TRABAJADOR.DNI%TYPE,
P_T_NOMBRE TRABAJADOR.NOMBRE%TYPE,
P_T_APE1 TRABAJADOR.APELLIDO_1%TYPE,
P_T_APE2 TRABAJADOR.APELLIDO_2%TYPE,
P_T_CALLE TRABAJADOR.CALLE%TYPE,
P_T_PORTAL TRABAJADOR.PORTAL%TYPE,
P_T_PISO TRABAJADOR.PISO%TYPE,
P_T_MANO TRABAJADOR.MANO%TYPE,
P_T_TP TRABAJADOR.TELEFONO_PERSONAL%TYPE,
P_T_ME TRABAJADOR.MOVIL_EMPRESA%TYPE,
P_T_SALARIO TRABAJADOR.SALARIO%TYPE,
P_T_FN TRABAJADOR.FECHA_NACIMIENTO%TYPE,
P_T_CATE TRABAJADOR.CATEGORIA%TYPE,
P_T_CT TRABAJADOR.CENTRO_TRABAJO_ID_CENTRO%TYPE)
AS
BEGIN
      UPDATE TRABAJADOR
      SET
            DNI = P_T_DNI,
            NOMBRE = P_T_NOMBRE,
            APELLIDO_1 = P_T_APE1,
            APELLIDO_2 = P_T_APE2,
            CALLE = P_T_CALLE,
            PORTAL = P_T_PORTAL,
            PISO = P_T_PISO,
            MANO = P_T_MANO,
            TELEFONO_PERSONAL = P_T_TP,
            MOVIL_EMPRESA = P_T_ME,
            SALARIO = P_T_SALARIO,
            FECHA_NACIMIENTO = P_T_FN,
            CATEGORIA = P_T_CATE,
            CENTRO_TRABAJO_ID_CENTRO = P_T_CT

      where ID_TRABAJADOR = P_T_ID;

IF sql%notfound
THEN
INSERT INTO TRABAJADOR(ID_TRABAJADOR, DNI, NOMBRE, APELLIDO_1, APELLIDO_2, CALLE, PORTAL, PISO,
MANO, TELEFONO_PERSONAL, MOVIL_EMPRESA, SALARIO, FECHA_NACIMIENTO, CATEGORIA, CENTRO_TRABAJO_ID_CENTRO)
VALUES (P_T_ID, P_T_DNI, P_T_NOMBRE, P_T_APE1, P_T_APE2, P_T_CALLE, P_T_PORTAL, P_T_PISO, P_T_MANO,
P_T_TP, P_T_ME, P_T_SALARIO, P_T_FN, P_T_CATE, P_T_CT);
COMMIT;
END IF;
END;

DROP PUBLIC SYNONYM INSERTAR_UPDATE_TRABAJADORTRABAJADOR;
CREATE PUBLIC SYNONYM INSERTAR_UPDATE_TRABAJADOR FOR INSERT_Y_UPDATE_T;


--EDITAR CENTRO DE TRABAJO
 CREATE OR REPLACE PROCEDURE INSERT_Y_UPDATE_CT(
P_CT_ID TCENTRO_TRABAJO.ID_CENTRO%TYPE,
P_CT_NOMBRE TCENTRO_TRABAJO.NOMBRE%TYPE,
P_CT_CALLE TCENTRO_TRABAJO.CALLE%TYPE,
P_CT_NUMERO TCENTRO_TRABAJO.NUMERO%TYPE,
P_CT_CP TCENTRO_TRABAJO.CODIGO_POSTAL%TYPE,
P_CT_CIUDAD TCENTRO_TRABAJO.CIUDAD%TYPE,
P_CT_PROVINCIA TCENTRO_TRABAJO.PROVINCIA%TYPE,
P_CT_TELEFONO TCENTRO_TRABAJO.TELEFONO%TYPE)
AS
BEGIN
      UPDATE CENTRO_TRABAJO
      SET
            NOMBRE=P_CT_NOMBRE,
            CALLE=P_CT_CALLE,
            NUMERO=P_CT_NUMERO,
            CODIGO_POSTAL=P_CT_CP,
            CIUDAD = P_CT_CIUDAD,
            PROVINCIA = P_CT_PROVINCIA,
            TELEFONO = P_CT_TELEFONO
      where ID_CENTRO=P_CT_ID;
IF sql%notfound
THEN
	INSERT INTO CENTRO_TRABAJO(ID_CENTRO, NOMBRE, CALLE, NUMERO, CODIGO_POSTAL, CIUDAD, PROVINCIA, TELEFONO)
	VALUES (P_CT_ID, P_CT_NOMBRE, P_CT_CALLE, P_CT_NUMERO, P_CT_CP, P_CT_CIUDAD, P_CT_PROVINCIA, P_CT_TELEFONO);
COMMIT;
END IF;
END;
DROP PUBLIC SYNONYM UPDATE_INSERT_CENTRO;
CREATE PUBLIC SYNONYM UPDATE_INSERT_CENTRO FOR INSERT_Y_UPDATE_CT;


--BORRAR CENTRO DE TRABAJO
create or replace PROCEDURE DELETE_CT(
CT_ID IN CENTRO_TRABAJO.ID_CENTRO%TYPE)
AS
BEGIN
      DELETE FROM CENTRO_TRABAJO WHERE ID_CENTRO = CT_ID;
COMMIT;
END;
DROP PUBLIC SYNONYM BORRAR_CENTRO;
CREATE PUBLIC SYNONYM BORRAR_CENTRO FOR DELETE_CT;


--BORRAR TRABAJADOR
create or replace PROCEDURE DELETE_TRABAJADOR(
P_T_ID IN TRABAJADOR.ID_TRABAJADOR%TYPE)
AS
BEGIN
      DELETE FROM TRABAJADOR WHERE ID_TRABAJADOR = P_T_ID;
COMMIT;
END;
DROP PUBLIC SYNONYM BORRAR_TRABAJADOR;
CREATE PUBLIC SYNONYM BORRAR_TRABAJADOR FOR DELETE_TRABAJADOR;

--insertar_clave
CREATE OR REPLACE PROCEDURE insertar_clave (NOMBRE IN VARCHAR2, ID_T IN NUMBER)
AS
BEGIN
INSERT INTO CLAVE VALUES (ID_CLAVE.NEXTVAL,NOMBRE,'himevico12345',SYSDATE,ID_T);
END;














COMMIT;