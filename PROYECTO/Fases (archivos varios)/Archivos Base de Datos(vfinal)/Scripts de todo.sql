--PAQUETE de Busqueda de centros de trabajo
--CABECERA DEL PAQUETE
CREATE OR REPLACE PACKAGE PAQUETE_BUSCAR_CT IS
PROCEDURE BUSCAR_TOTAL_CT (B OUT SYS_REFCURSOR);
END;
/
 
--CUERPO DEL PAQUETE
CREATE OR REPLACE PACKAGE BODY PAQUETE_BUSCAR_CT IS
PROCEDURE BUSCAR_TOTAL_CT(B OUT SYS_REFCURSOR)
IS
BEGIN
OPEN B FOR
SELECT *  FROM CENTRO_TRABAJO;
END;
END;
/
CREATE PUBLIC SYNONYM CONSULTA_CT FOR PAQUETE_BUSCAR_CT ;
/


--PAQUETE de Busqueda de un Centro de trabajo concreto
--CABECERA DEL PAQUETE
CREATE OR REPLACE PACKAGE PAQUETE_BUSCAR_UN_CENTRO IS
PROCEDURE BUSCAR_UN_CENTRO ( ID_C IN CENTRO_TRABAJO.ID_CENTRO%TYPE, UNO OUT NUMBER, DOS OUT VARCHAR2, TRES OUT VARCHAR2, CUATRO OUT NUMBER, CINCO OUT VARCHAR2, SEIS OUT VARCHAR2, SIETE OUT VARCHAR2, OCHO OUT VARCHAR2);
END;
/
 
--CUERPO DEL PAQUETE
CREATE OR REPLACE PACKAGE BODY PAQUETE_BUSCAR_UN_CENTRO IS
PROCEDURE BUSCAR_UN_CENTRO ( ID_C IN CENTRO_TRABAJO.ID_CENTRO%TYPE,  UNO OUT NUMBER, DOS OUT VARCHAR2, TRES OUT VARCHAR2, CUATRO OUT NUMBER, CINCO OUT VARCHAR2, SEIS OUT VARCHAR2, SIETE OUT VARCHAR2, OCHO OUT VARCHAR2)
IS
LINEA CENTRO_TRABAJO%ROWTYPE;
BEGIN

  SELECT * INTO LINEA FROM CENTRO_TRABAJO 
  WHERE ID_CENTRO = ID_C;
  UNO:=LINEA.ID_CENTRO;
  DOS:=LINEA.NOMBRE;
  TRES:=LINEA.CALLE;
  CUATRO:=LINEA.NUMERO;
  CINCO:=LINEA.CODIGO_POSTAL;
  SEIS:=LINEA.CIUDAD;
  SIETE:=LINEA.PROVINCIA;
  OCHO:=LINEA.TELEFONO;
  
  EXCEPTION 
  WHEN NO_DATA_FOUND THEN
  RAISE_APPLICATION_ERROR( -20000  , 'Error', TRUE);
  WHEN TOO_MANY_ROWS THEN
  RAISE_APPLICATION_ERROR( -20000  , 'Error', TRUE);
END;
END;
/
CREATE PUBLIC SYNONYM CONSULTA_UN_CT FOR PAQUETE_BUSCAR_UN_CENTRO;
/

--Procedimiento de Busqueda de todos los Trabajadores
CREATE OR REPLACE PROCEDURE BUSCAR_TOTAL_T (B OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN B FOR
  SELECT * FROM TRABAJADOR;
  COMMIT;
END;
/
CREATE PUBLIC SYNONYM BUSCAR_TRABAJADORES FOR BUSCAR_TOTAL_T;
/


--Procedimiento de Busqueda de un Trabajador
CREATE OR REPLACE PROCEDURE BUSCAR_UN_TRABAJADOR ( ID_C IN TRABAJADOR.CENTRO_TRABAJO_ID_CENTRO%TYPE,  UNO OUT NUMBER, DOS OUT VARCHAR2, TRES OUT VARCHAR2, CUATRO OUT VARCHAR2, CINCO OUT VARCHAR2, SEIS OUT VARCHAR2, SIETE OUT VARCHAR2, OCHO OUT VARCHAR2, NUEVE OUT VARCHAR2, DIEZ OUT VARCHAR2, ONCE OUT VARCHAR2, DOCE OUT NUMBER, TRECE OUT DATE, CATORCE OUT VARCHAR2, QUINCE OUT NUMBER)
IS
LINEA TTRABAJADOR%ROWTYPE;
BEGIN
  SELECT * INTO LINEA FROM TRABAJADOR 
  WHERE CENTRO_TRABAJO_ID_CENTRO = ID_C;
  UNO:=LINEA.ID_TRABAJADOR;
  DOS:=LINEA.DNI;
  TRES:=LINEA.NOMBRE;
  CUATRO:=LINEA.APELLIDO_1;
  CINCO:=LINEA.APELLIDO_2;
  SEIS:=LINEA.CALLE;
  SIETE:=LINEA.PORTAL;
  OCHO:=LINEA.PISO;
  NUEVE:=LINEA.MANO;
  DIEZ:=LINEA.TELEFONO_PERSONAL;
  ONCE:=LINEA.MOVIL_EMPRESA;
  DOCE:=LINEA.SALARIO;
  TRECE:=LINEA.FECHA_NACIMIENTO;
  CATORCE:=LINEA.CATEGORIA;
  QUINCE:=LINEA.CENTRO_TRABAJO_ID_CENTRO;
    EXCEPTION 
  WHEN NO_DATA_FOUND THEN
  RAISE_APPLICATION_ERROR( -20000  , 'Error', TRUE);
  WHEN TOO_MANY_ROWS THEN
  RAISE_APPLICATION_ERROR( -20000  , 'Error', TRUE);
  COMMIT;
END;
/
CREATE PUBLIC SYNONYM BUSCAR_UN_T FOR BUSCAR_UN_TRABAJADOR;
/


--Procedimiento de comprobaci√≥n del login de usuario
create or replace PROCEDURE COMPROBAR_LOGIN (USU IN VARCHAR2 , PASS IN VARCHAR2, CLAVE1 OUT NUMBER, CLAVE2 OUT VARCHAR2, CLAVE3 OUT VARCHAR2, CLAVE4 OUT DATE, CLAVE5 OUT NUMBER, UNO OUT NUMBER, DOS OUT VARCHAR2, TRES OUT VARCHAR2, CUATRO OUT VARCHAR2, CINCO OUT VARCHAR2, SEIS OUT VARCHAR2, SIETE OUT VARCHAR2, OCHO OUT VARCHAR2, NUEVE OUT VARCHAR2, DIEZ OUT VARCHAR2, ONCE OUT VARCHAR2, DOCE OUT NUMBER, TRECE OUT DATE, CATORCE OUT VARCHAR2, QUINCE OUT NUMBER, hay out number)
AS
LINEACLAVE CLAVE%ROWTYPE;
LINEATRABAJADOR TRABAJADOR%ROWTYPE;
ID_TRA NUMBER;
BEGIN
SELECT * INTO LINEACLAVE FROM CLAVE
  WHERE USU = CLAVE.USUARIO
  AND CLAVE.CONTRASENYA = PASS;
  ID_TRA:= LINEACLAVE.TRABAJADOR_ID_TRABAJADOR;
  SELECT * INTO LINEATRABAJADOR FROM TRABAJADOR
  WHERE ID_TRABAJADOR = ID_TRA;
  
  CLAVE1:= LINEACLAVE.ID_CLAVE;
  CLAVE2:= LINEACLAVE.USUARIO;
  CLAVE3:= LINEACLAVE.CONTRASENYA;
  CLAVE4:= LINEACLAVE.FECHA;
  CLAVE5:= LINEACLAVE.TRABAJADOR_ID_TRABAJADOR;
  UNO:=LINEATRABAJADOR.ID_TRABAJADOR;
  DOS:=LINEATRABAJADOR.DNI;
  TRES:=LINEATRABAJADOR.NOMBRE;
  CUATRO:=LINEATRABAJADOR.APELLIDO_1;
  CINCO:=LINEATRABAJADOR.APELLIDO_2;
  SEIS:=LINEATRABAJADOR.CALLE;
  SIETE:=LINEATRABAJADOR.PORTAL;
  OCHO:=LINEATRABAJADOR.PISO;
  NUEVE:=LINEATRABAJADOR.MANO;
  DIEZ:=LINEATRABAJADOR.TELEFONO_PERSONAL;
  ONCE:=LINEATRABAJADOR.MOVIL_EMPRESA;
  DOCE:=LINEATRABAJADOR.SALARIO;
  TRECE:=LINEATRABAJADOR.FECHA_NACIMIENTO;
  CATORCE:=LINEATRABAJADOR.CATEGORIA;
  QUINCE:=LINEATRABAJADOR.CENTRO_TRABAJO_ID_CENTRO;
  hay := 1;
  EXCEPTION 
  WHEN NO_DATA_FOUND THEN
  hay := 0;
  WHEN TOO_MANY_ROWS THEN
  hay := 0;
  COMMIT;
END;
/
CREATE PUBLIC SYNONYM LOGIN FOR COMPROBAR_LOGIN;
/

--INSERTAR O UPDATE TRABAJADOR
create or replace PROCEDURE  INSERT_Y_UPDATE_T(
P_T_ID TRABAJADOR.ID_TRABAJADOR%TYPE,
P_T_DNI TRABAJADOR.DNI%TYPE,
P_T_NOMBRE TRABAJADOR.NOMBRE%TYPE,
P_T_APE1 TRABAJADOR.APELLIDO_1%TYPE,
P_T_APE2 TRABAJADOR.APELLIDO_2%TYPE,
P_T_CALLE TRABAJADOR.CALLE%TYPE,
P_T_PORTAL TRABAJADOR.PORTAL%TYPE,
P_T_PISO TRABAJADOR.PISO%TYPE,
P_T_MANO TRABAJADOR.MANO%TYPE,
P_T_TP TRABAJADOR.TELEFONO_PERSONAL%TYPE,
P_T_ME TRABAJADOR.MOVIL_EMPRESA%TYPE,
P_T_SALARIO TRABAJADOR.SALARIO%TYPE,
P_T_FN TRABAJADOR.FECHA_NACIMIENTO%TYPE,
P_T_CATE TRABAJADOR.CATEGORIA%TYPE,
P_T_CT TRABAJADOR.CENTRO_TRABAJO_ID_CENTRO%TYPE)
AS
BEGIN
      UPDATE TRABAJADOR
      SET
            DNI = P_T_DNI,
            NOMBRE = P_T_NOMBRE,
            APELLIDO_1 = P_T_APE1,
            APELLIDO_2 = P_T_APE2,
            CALLE = P_T_CALLE,
            PORTAL = P_T_PORTAL,
            PISO = P_T_PISO,
            MANO = P_T_MANO,
            TELEFONO_PERSONAL = P_T_TP,
            MOVIL_EMPRESA = P_T_ME,
            SALARIO = P_T_SALARIO,
            FECHA_NACIMIENTO = P_T_FN,
            CATEGORIA = P_T_CATE,
            CENTRO_TRABAJO_ID_CENTRO = P_T_CT

      where ID_TRABAJADOR = P_T_ID;

IF sql%notfound
THEN
INSERT INTO TRABAJADOR(ID_TRABAJADOR, DNI, NOMBRE, APELLIDO_1, APELLIDO_2, CALLE, PORTAL, PISO,
MANO, TELEFONO_PERSONAL, MOVIL_EMPRESA, SALARIO, FECHA_NACIMIENTO, CATEGORIA, CENTRO_TRABAJO_ID_CENTRO)
VALUES (P_T_ID, P_T_DNI, P_T_NOMBRE, P_T_APE1, P_T_APE2, P_T_CALLE, P_T_PORTAL, P_T_PISO, P_T_MANO,
P_T_TP, P_T_ME, P_T_SALARIO, P_T_FN, P_T_CATE, P_T_CT);
COMMIT;
END IF;
END;
/
CREATE PUBLIC SYNONYM INSERTAR_UPDATE_TRABAJADOR FOR INSERT_Y_UPDATE_T;
/


--INSERTAR O UPDATE CENTRO DE TRABAJO
 CREATE OR REPLACE PROCEDURE INSERT_Y_UPDATE_CT(
P_CT_ID CENTRO_TRABAJO.ID_CENTRO%TYPE,
P_CT_NOMBRE CENTRO_TRABAJO.NOMBRE%TYPE,
P_CT_CALLE CENTRO_TRABAJO.CALLE%TYPE,
P_CT_NUMERO CENTRO_TRABAJO.NUMERO%TYPE,
P_CT_CP CENTRO_TRABAJO.CODIGO_POSTAL%TYPE,
P_CT_CIUDAD CENTRO_TRABAJO.CIUDAD%TYPE,
P_CT_PROVINCIA CENTRO_TRABAJO.PROVINCIA%TYPE,
P_CT_TELEFONO CENTRO_TRABAJO.TELEFONO%TYPE)
AS
BEGIN
      UPDATE CENTRO_TRABAJO
      SET
            NOMBRE=P_CT_NOMBRE,
            CALLE=P_CT_CALLE,
            NUMERO=P_CT_NUMERO,
            CODIGO_POSTAL=P_CT_CP,
            CIUDAD = P_CT_CIUDAD,
            PROVINCIA = P_CT_PROVINCIA,
            TELEFONO = P_CT_TELEFONO
      where ID_CENTRO=P_CT_ID;
IF sql%notfound
THEN
	INSERT INTO CENTRO_TRABAJO(ID_CENTRO, NOMBRE, CALLE, NUMERO, CODIGO_POSTAL, CIUDAD, PROVINCIA, TELEFONO)
	VALUES (P_CT_ID, P_CT_NOMBRE, P_CT_CALLE, P_CT_NUMERO, P_CT_CP, P_CT_CIUDAD, P_CT_PROVINCIA, P_CT_TELEFONO);
COMMIT;
END IF;
END;
/
CREATE PUBLIC SYNONYM UPDATE_INSERT_CENTRO FOR INSERT_Y_UPDATE_CT;
/


--BORRAR CENTRO DE TRABAJO
create or replace PROCEDURE DELETE_CT(
CT_ID IN CENTRO_TRABAJO.ID_CENTRO%TYPE)
AS
BEGIN
      DELETE FROM CENTRO_TRABAJO WHERE ID_CENTRO = CT_ID;
COMMIT;
END;
/
CREATE PUBLIC SYNONYM BORRAR_CENTRO FOR DELETE_CT;
/


--BORRAR TRABAJADOR
create or replace PROCEDURE DELETE_TRABAJADOR(
P_T_ID IN TRABAJADOR.ID_TRABAJADOR%TYPE)
AS
BEGIN
      DELETE FROM TRABAJADOR WHERE ID_TRABAJADOR = P_T_ID;
COMMIT;
END;
/
CREATE PUBLIC SYNONYM BORRAR_TRABAJADOR FOR DELETE_TRABAJADOR;
/

--insertar_clave
CREATE OR REPLACE PROCEDURE INSERT_CLAVE_CREAR_USER (NOMBRE IN VARCHAR2, ID_T IN NUMBER)
AS

CONTRA varchar2(100) := 'himevico12345';
BEGIN
INSERT INTO CLAVE VALUES (ID_CLAVE.NEXTVAL,NOMBRE,CONTRA,SYSDATE,ID_T);
END;
/
CREATE PUBLIC SYNONYM INSERTAR_CLAVE FOR INSERT_CLAVE_CREAR_USER;
/



CREATE OR REPLACE PROCEDURE MODIFICAR_CONTRA(
CLAVE_ID in CLAVE.ID_CLAVE%TYPE,
C_CONTRA in CLAVE.CONTRASENYA%TYPE,
C_FECHA in CLAVE.FECHA%TYPE)
AS
BEGIN
      UPDATE CLAVE
      SET
            CONTRASENYA=C_CONTRA,
            FECHA=C_FECHA          
      where ID_CLAVE=CLAVE_ID;
	  
COMMIT;
END;
/
CREATE PUBLIC SYNONYM CAMBIAR_CONTRA FOR MODIFICAR_CONTRA;
/


--COMPROBAR SI HAY ALGUN PARTE ABIERTO Y SI HAY, DEVOLVERLO
create or replace PROCEDURE COMPROBAR_PARTES_ABIERTOS(
ID_TRA IN NUMBER,
FECHA OUT CP.FECHA%TYPE,
KM_INICIO OUT CP.KM_INICIO%TYPE,
KM_FINAL OUT CP.KM_FINAL%TYPE,
GASTO_GASOIL OUT CP.GASTO_GASOIL%TYPE,
GASTO_AUTOPISTA OUT CP.GASTO_AUTOPISTA%TYPE,
GASTO_DIETAS OUT CP.GASTO_DIETAS%TYPE,
OTROS_GASTOS OUT CP.OTROS_GASTOS%TYPE,
INCIDENCIAS_POSIBLES OUT CP.INCIDENCIAS_POSIBLES%TYPE,
EXCESO_HORAS OUT CP.EXCESO_HORAS%TYPE,
CERRAR_LOGIS OUT CP.CERRAR_LOGIS%TYPE,
VERIFICACION_ADMIN OUT CP.VERIFICACION_ADMIN%TYPE,
TRABAJADOR_ID_TRABAJADOR OUT CP.TRABAJADOR_ID_TRABAJADOR%TYPE,
VEHICULO_MATRICULA OUT CP.VEHICULO_MATRICULA%TYPE,
SI_DEVUELVE OUT NUMBER
)
AS
LINEA CP%ROWTYPE;
BEGIN
      SELECT * INTO LINEA FROM CP 
      WHERE TRABAJADOR_ID_TRABAJADOR = ID_TRA AND VERIFICACION_ADMIN = 0;
      FECHA:= LINEA.FECHA;
      KM_INICIO:=LINEA.KM_INICIO;
      KM_FINAL := LINEA.KM_FINAL;
      GASTO_GASOIL:= LINEA.GASTO_GASOIL;
      GASTO_AUTOPISTA:= LINEA.GASTO_AUTOPISTA;
      GASTO_DIETAS:= LINEA.GASTO_DIETAS;
      OTROS_GASTOS:= LINEA.OTROS_GASTOS;
      INCIDENCIAS_POSIBLES:= LINEA.INCIDENCIAS_POSIBLES;
      EXCESO_HORAS:= LINEA.EXCESO_HORAS;
      CERRAR_LOGIS:= LINEA.CERRAR_LOGIS;
      VERIFICACION_ADMIN:= LINEA.VERIFICACION_ADMIN;
      TRABAJADOR_ID_TRABAJADOR:= LINEA.TRABAJADOR_ID_TRABAJADOR;
      VEHICULO_MATRICULA:= LINEA.VEHICULO_MATRICULA;
      SI_DEVUELVE:=1;
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
  SI_DEVUELVE:=0;
      
COMMIT;
END;
/
CREATE PUBLIC SYNONYM TRAER_PARTE_ABIERTO FOR COMPROBAR_PARTES_ABIERTOS;
/


--traer lineas
CREATE OR REPLACE PROCEDURE TRAER_LINEAS (
FECHA_C IN DATE,
ID_T IN NUMBER,
LINEA OUT SYS_REFCURSOR
)
AS
BEGIN
OPEN LINEA FOR 
SELECT * FROM LP WHERE ID_T = CP_TRABAJADOR_ID_TRABAJADOR
AND FECHA_C = CP_FECHA;

COMMIT;
END;
/
CREATE PUBLIC SYNONYM PASAR_LINEA FOR TRAER_LINEAS;
/


--insert update cabecera
CREATE OR REPLACE PROCEDURE INSERT_Y_UPDATE_CABECERA(
CP_FECHA IN CP.FECHA%TYPE,
CP_KM_INICIO IN CP.KM_INICIO%TYPE,
CP_KM_FIN IN CP.KM_FINAL%TYPE,
CP_GASOIL IN CP.GASTO_GASOIL%TYPE,
CP_AUTOPISTA IN CP.GASTO_AUTOPISTA%TYPE,
CP_DIETAS IN CP.GASTO_DIETAS%TYPE,
CP_OTROS IN CP.OTROS_GASTOS%TYPE,
CP_INCIDENCIAS IN CP.INCIDENCIAS_POSIBLES%TYPE,
CP_EXCESO_HORAS IN CP.EXCESO_HORAS%TYPE,
CP_CERRAR_PARTE IN CP.CERRAR_LOGIS%TYPE,
CP_VERIFICAR IN CP.VERIFICACION_ADMIN%TYPE,
CP_ID_TRA IN CP.TRABAJADOR_ID_TRABAJADOR%TYPE,
CP_MATRICULA IN CP.VEHICULO_MATRICULA%TYPE
)
AS
BEGIN
      UPDATE CP
      SET
            FECHA=CP_FECHA,
            KM_INICIO=CP_KM_INICIO,
            KM_FINAL=CP_KM_FIN,
            GASTO_GASOIL=CP_GASOIL,
            GASTO_AUTOPISTA = CP_AUTOPISTA,
            GASTO_DIETAS = CP_DIETAS,
            OTROS_GASTOS = CP_OTROS,
            INCIDENCIAS_POSIBLES = CP_INCIDENCIAS,
            EXCESO_HORAS = CP_EXCESO_HORAS,
            CERRAR_LOGIS = CP_CERRAR_PARTE,
            VERIFICACION_ADMIN = CP_VERIFICAR,
            TRABAJADOR_ID_TRABAJADOR = CP_ID_TRA,
            VEHICULO_MATRICULA = CP_MATRICULA

      where FECHA=CP_FECHA AND TRABAJADOR_ID_TRABAJADOR = CP_ID_TRA AND VEHICULO_MATRICULA = CP_MATRICULA;
IF sql%notfound
THEN
	INSERT INTO CP(FECHA, KM_INICIO, KM_FINAL, GASTO_GASOIL, GASTO_AUTOPISTA, GASTO_DIETAS, OTROS_GASTOS, INCIDENCIAS_POSIBLES, EXCESO_HORAS, CERRAR_LOGIS, VERIFICACION_ADMIN, TRABAJADOR_ID_TRABAJADOR, VEHICULO_MATRICULA)
	VALUES (CP_FECHA, CP_KM_INICIO, CP_KM_FIN, CP_GASOIL, CP_AUTOPISTA, CP_DIETAS, CP_OTROS, CP_INCIDENCIAS, CP_EXCESO_HORAS, CP_CERRAR_PARTE, CP_VERIFICAR, CP_ID_TRA, CP_MATRICULA);
COMMIT;
END IF;
END;
/
CREATE PUBLIC SYNONYM INSERT_UPDATE_CABECERA FOR INSERT_Y_UPDATE_CABECERA;
/


--INSERTAR O UPDATE LINEAS PARTE.
CREATE OR REPLACE PROCEDURE INSERT_Y_UPDATE_LINEAS(
LP_HORA_INICIO IN LP.HORA_INICIO%TYPE,
LP_HORA_FIN IN LP.HORA_FINAL%TYPE,
LP_CP_FECHA IN LP.CP_FECHA%TYPE,
LP_CP_TRABAJADOR_ID_TRABAJADOR IN LP.CP_TRABAJADOR_ID_TRABAJADOR%TYPE
)
AS
BEGIN
      UPDATE LP
      SET
            HORA_INICIO=LP_HORA_INICIO,
            HORA_FINAL=LP_HORA_FIN,
            CP_FECHA=LP_CP_FECHA,
            CP_TRABAJADOR_ID_TRABAJADOR=LP_CP_TRABAJADOR_ID_TRABAJADOR
            
      where HORA_INICIO = LP_HORA_INICIO AND CP_FECHA=LP_CP_FECHA AND CP_TRABAJADOR_ID_TRABAJADOR = LP_CP_TRABAJADOR_ID_TRABAJADOR;
IF sql%notfound
THEN
	INSERT INTO LP(HORA_INICIO, HORA_FINAL, CP_FECHA, CP_TRABAJADOR_ID_TRABAJADOR)
	VALUES (LP_HORA_INICIO, LP_HORA_FIN, LP_CP_FECHA, LP_CP_TRABAJADOR_ID_TRABAJADOR);
COMMIT;
END IF;
END;
/
CREATE PUBLIC SYNONYM INSERT_O_UPDATE_LINEAS FOR INSERT_Y_UPDATE_LINEAS;
/


-- 1 Borrar AVISOS
create or replace PROCEDURE PR_DELETE_AVISO(
P_FCABE AVISO.CP_FECHA%TYPE,
P_ID AVISO.CP_TRABAJADOR_ID_TRABAJADOR%TYPE)
AS
BEGIN
      DELETE FROM AVISO WHERE CP_FECHA = P_FCABE AND CP_TRABAJADOR_ID_TRABAJADOR = P_ID;
COMMIT;
END;
/
CREATE PUBLIC SYNONYM P_DELETE_AVISO FOR PR_DELETE_AVISO;
/

-- 2 Borrar CABECERAS DE PARTE
create or replace PROCEDURE PR_DELETE_CABE_PARTE(
P_FECHA CP.FECHA%TYPE,
P_ID CP.TRABAJADOR_ID_TRABAJADOR%TYPE)
AS
BEGIN
      DELETE FROM CP WHERE FECHA = P_FECHA AND TRABAJADOR_ID_TRABAJADOR = P_ID;
COMMIT;
END;
/
CREATE PUBLIC SYNONYM P_DELETE_CABE_PARTE FOR PR_DELETE_CABE_PARTE;
/

-- 3 Borrar GESTION DE PARTES
create or replace PROCEDURE PR_DELETE_GESTION_PARTE(
P_FECHA CP.FECHA%TYPE,
P_MATRICULA CP.VEHICULO_MATRICULA%TYPE,
P_ID CP.TRABAJADOR_ID_TRABAJADOR%TYPE)
AS
BEGIN
      DELETE FROM CP WHERE FECHA = P_FECHA AND TRABAJADOR_ID_TRABAJADOR = P_ID AND VEHICULO_MATRICULA = P_MATRICULA;
COMMIT;
END;
/
CREATE PUBLIC SYNONYM P_DELETE_GESTION_PARTE FOR PR_DELETE_GESTION_PARTE;
/

--BORRAR LINEAS PARTE
create or replace PROCEDURE PR_DELETE_LINEA_PARTE(
P_FECHA LP.CP_FECHA%TYPE,
P_ID LP.CP_TRABAJADOR_ID_TRABAJADOR%TYPE)
AS
BEGIN
      DELETE FROM LP WHERE CP_FECHA = P_FECHA AND CP_TRABAJADOR_ID_TRABAJADOR = P_ID;
COMMIT;
END;
/
CREATE PUBLIC SYNONYM P_DELETE_LINEA_PARTE FOR PR_DELETE_LINEA_PARTE;
/

-- Borrar VEHICULO
create or replace PROCEDURE PR_DELETE_Vehiculo(
P_V_MATRICULA VEHICULO.MATRICULA%TYPE)
AS
BEGIN
      DELETE FROM VEHICULO WHERE MATRICULA=P_V_MATRICULA;
COMMIT;
END;
/
CREATE PUBLIC SYNONYM P_DELETE_Vehiculo FOR PR_DELETE_Vehiculo;
/

--INSERT O UPDATE AVISO
create or replace PROCEDURE PR_IN_EDIT_AVISO(
P_FAVISO AVISO.FECHA_AVISO%TYPE,
P_TEXTO AVISO.TEXTO%TYPE,
P_ID AVISO.TRABAJADOR_ID_TRABAJADOR%TYPE,
P_FPARTE AVISO.CP_FECHA%TYPE,
P_IDCP AVISO.CP_TRABAJADOR_ID_TRABAJADOR%TYPE)
AS
BEGIN
      UPDATE AVISO
      SET
            FECHA_AVISO = P_FAVISO,
            TEXTO = P_TEXTO,
            TRABAJADOR_ID_TRABAJADOR = P_ID,
            CP_FECHA = P_FPARTE,
            CP_TRABAJADOR_ID_TRABAJADOR = P_IDCP

      where CP_FECHA = P_FPARTE AND CP_TRABAJADOR_ID_TRABAJADOR = P_IDCP;
IF sql%notfound
THEN
INSERT INTO AVISO(FECHA_AVISO, TEXTO, TRABAJADOR_ID_TRABAJADOR, CP_FECHA, CP_TRABAJADOR_ID_TRABAJADOR)
VALUES (P_FAVISO, P_TEXTO, P_ID, P_FPARTE, P_IDCP);
END IF;
COMMIT;
END;
/
CREATE PUBLIC SYNONYM P_IN_EDIT_AVISO FOR PR_IN_EDIT_AVISO;
/

--INSERT O UPDATE CABECERA PARTE
create or replace PROCEDURE  PR_IN_EDIT_CABE_PARTE(
P_FECHA CP.FECHA%TYPE,
P_KMI CP.KM_INICIO%TYPE,
P_KMF CP.KM_FINAL%TYPE,
P_GASOIL CP.GASTO_GASOIL%TYPE,
P_AUTO CP.GASTO_AUTOPISTA%TYPE,
P_DIETAS CP.GASTO_DIETAS%TYPE,
P_OTROS CP.OTROS_GASTOS%TYPE,
P_INCI CP.INCIDENCIAS_POSIBLES%TYPE,
P_EH CP.EXCESO_HORAS%TYPE,
P_CERRAR CP.CERRAR_LOGIS%TYPE,
P_VERIFICA CP.VERIFICACION_ADMIN%TYPE,
P_ID CP.TRABAJADOR_ID_TRABAJADOR%TYPE,
P_MATRICULA CP.VEHICULO_MATRICULA%TYPE)
AS
BEGIN
      UPDATE CP
      SET
            FECHA = P_FECHA,
            KM_INICIO = P_KMI,
            KM_FINAL = P_KMF,
            GASTO_GASOIL = P_GASOIL,
            GASTO_AUTOPISTA = P_AUTO,
            GASTO_DIETAS = P_DIETAS,
            OTROS_GASTOS = P_OTROS,
            INCIDENCIAS_POSIBLES = P_INCI,
            EXCESO_HORAS = P_EH,
            CERRAR_LOGIS = P_CERRAR,
            VERIFICACION_ADMIN = P_VERIFICA,
            TRABAJADOR_ID_TRABAJADOR = P_ID,
            VEHICULO_MATRICULA = P_MATRICULA

      where FECHA = P_FECHA AND TRABAJADOR_ID_TRABAJADOR = P_ID;

IF sql%notfound
THEN
INSERT INTO CP(FECHA, KM_INICIO, KM_FINAL, GASTO_GASOIL, GASTO_AUTOPISTA, GASTO_DIETAS, OTROS_GASTOS,
INCIDENCIAS_POSIBLES, EXCESO_HORAS, CERRAR_LOGIS, VERIFICACION_ADMIN, TRABAJADOR_ID_TRABAJADOR, VEHICULO_MATRICULA)
VALUES (P_FECHA, P_KMI, P_KMF, P_GASOIL, P_AUTO, P_DIETAS, P_OTROS, P_INCI, P_EH, P_CERRAR,
P_VERIFICA, P_ID, P_MATRICULA);
COMMIT;
END IF;
END;
/
CREATE PUBLIC SYNONYM P_IN_EDIT_CABE_PARTE FOR PR_IN_EDIT_CABE_PARTE;
/

--INSERT O UPDATE GESTION DE PARTE
create or replace PROCEDURE PR_IN_EDIT_GESTION_PARTE(
P_FECHA CP.FECHA%TYPE,
P_ID CP.TRABAJADOR_ID_TRABAJADOR%TYPE,
P_MATRICULA CP.VEHICULO_MATRICULA%TYPE,
P_KMINI CP.KM_INICIO%TYPE:=1,
P_KMFIN CP.KM_INICIO%TYPE:=1,
P_GASOIL CP.GASTO_GASOIL%TYPE,
P_AUTOPISTA CP.GASTO_AUTOPISTA%TYPE,
P_DIETAS CP.GASTO_DIETAS%TYPE,
P_OTROS CP.OTROS_GASTOS%TYPE,
P_INCI CP.INCIDENCIAS_POSIBLES%TYPE,
P_CRD CP.CERRAR_LOGIS%TYPE,
P_VRF CP.VERIFICACION_ADMIN%TYPE,
P_HE CP.EXCESO_HORAS%TYPE)
AS
BEGIN
      UPDATE CP
      SET
            FECHA = P_FECHA,
            TRABAJADOR_ID_TRABAJADOR = P_ID,
            VEHICULO_MATRICULA = P_MATRICULA,
            KM_FINAL = P_KMFIN,
            GASTO_GASOIL = P_GASOIL,
            GASTO_AUTOPISTA = P_AUTOPISTA,
            GASTO_DIETAS = P_DIETAS,
            OTROS_GASTOS = P_OTROS,
            INCIDENCIAS_POSIBLES = P_INCI,
            CERRAR_LOGIS = P_CRD,
            VERIFICACION_ADMIN = P_VRF,
            EXCESO_HORAS = P_HE
      where FECHA = P_FECHA AND TRABAJADOR_ID_TRABAJADOR = P_ID;

IF sql%notfound
THEN
INSERT INTO CP(FECHA,TRABAJADOR_ID_TRABAJADOR, VEHICULO_MATRICULA, KM_INICIO, KM_FINAL, GASTO_GASOIL, GASTO_AUTOPISTA, GASTO_DIETAS, OTROS_GASTOS, INCIDENCIAS_POSIBLES, CERRAR_LOGIS, VERIFICACION_ADMIN, EXCESO_HORAS)
VALUES (P_FECHA, P_ID, P_MATRICULA, P_KMINI, P_KMFIN, P_GASOIL, P_AUTOPISTA, P_DIETAS, P_OTROS, P_INCI, P_CRD, P_VRF, P_HE);
COMMIT;
END IF;
END;
/
CREATE PUBLIC SYNONYM P_IN_EDIT_GESTION_PARTE FOR PR_IN_EDIT_GESTION_PARTE;
/

--INSERT O UPDATE LINEA PARTE
create or replace PROCEDURE  PR_IN_EDIT_LINEA_PARTE(
P_HINI LP.HORA_INICIO%TYPE,
P_HFIN LP.HORA_FINAL%TYPE,
P_FECHA LP.CP_FECHA%TYPE,
P_ID LP.CP_TRABAJADOR_ID_TRABAJADOR%TYPE)
AS
BEGIN
      UPDATE LP
      SET
            HORA_INICIO = P_HINI,
            HORA_FINAL = P_HFIN,
            CP_FECHA = P_FECHA,
            CP_TRABAJADOR_ID_TRABAJADOR = P_ID

      where CP_FECHA = P_FECHA AND CP_TRABAJADOR_ID_TRABAJADOR = P_ID;

IF sql%notfound
THEN
INSERT INTO LP(HORA_INICIO, HORA_FINAL, CP_FECHA, CP_TRABAJADOR_ID_TRABAJADOR)
VALUES (P_HINI, P_HFIN, P_FECHA, P_ID);
COMMIT;
END IF;
END;
/
CREATE PUBLIC SYNONYM P_IN_EDIT_LINEA_PARTE FOR PR_IN_EDIT_LINEA_PARTE;
/

--INSERT O UPDATE VEHICULO
create or replace PROCEDURE  PR_IN_EDIT_VEHICULO(
P_V_MATRICULA VEHICULO.MATRICULA%TYPE,
P_V_MARCA VEHICULO.MARCA%TYPE,
P_V_MODELO VEHICULO.MODELO%TYPE,
P_V_COLOR VEHICULO.COLOR%TYPE,
P_V_KMS VEHICULO.KM_TOTALES%TYPE)
AS
BEGIN
      UPDATE VEHICULO
      SET
            MATRICULA = P_V_MATRICULA,
            MARCA = P_V_MARCA,
            MODELO = P_V_MODELO,
            COLOR = P_V_COLOR,
            KM_TOTALES = P_V_KMS

      where MATRICULA = P_V_MATRICULA;

IF sql%notfound
THEN
INSERT INTO VEHICULO(MATRICULA, MARCA, MODELO, COLOR, KM_TOTALES)
VALUES (P_V_MATRICULA, P_V_MARCA, P_V_MODELO, P_V_COLOR, P_V_KMS);
COMMIT;
END IF;
END;
/
CREATE PUBLIC SYNONYM P_IN_EDIT_VEHICULO FOR PR_IN_EDIT_VEHICULO;
/


-- PROCEDIMIENTOS DE LISTADO
create or replace PROCEDURE PR_LISTA_AVISO(CURSOR_AVISO OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN CURSOR_AVISO FOR
    SELECT * FROM AVISO_VISTA;
END;
/
CREATE PUBLIC SYNONYM P_LISTA_AVISO FOR PR_LISTA_AVISO;
/

create or replace PROCEDURE PR_LISTA_CT(CONSULTA_CT OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN CONSULTA_CT FOR
    SELECT * FROM CENTRO_TRABAJO;
END;
/
CREATE PUBLIC SYNONYM P_LISTA_CT FOR PR_LISTA_CT;
/

create or replace PROCEDURE PR_LISTA_GESTION(CURSOR_GESTION OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN CURSOR_GESTION FOR
    SELECT * FROM CP_VISTA;
END;
/
CREATE PUBLIC SYNONYM P_LISTA_GESTION FOR PR_LISTA_GESTION;
/

create or replace PROCEDURE PR_LISTA_TRABAJADOR(CURSOR_TRABAJADOR OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN CURSOR_TRABAJADOR FOR
    SELECT * FROM TRABAJADOR;
END;
/
CREATE PUBLIC SYNONYM P_LISTA_TRABAJADOR FOR PR_LISTA_TRABAJADOR;
/

create or replace PROCEDURE PR_LISTA_VEHICULO(CURSOR_VEHICULO OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN CURSOR_VEHICULO FOR
    SELECT * FROM VEHICULO;
END;
/
CREATE PUBLIC SYNONYM P_LISTA_VEHICULO FOR PR_LISTA_VEHICULO;
/

-- PROCEDIMIENTOS DE BUSQUEDA

create or replace PROCEDURE PR_SELECT_AVISO(P_NOMBRE AVISO_VISTA.NOMBRE%TYPE, CURSOR_AVISO OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN CURSOR_AVISO FOR
    SELECT * FROM AVISO_VISTA
    WHERE NOMBRE LIKE P_NOMBRE;
  COMMIT;
END;
/
CREATE PUBLIC SYNONYM P_SELECT_AVISO FOR PR_SELECT_AVISO;
/

create or replace PROCEDURE PR_SELECT_CRD_VFD(P_C IN CP_VISTA.CERRAR_LOGIS%TYPE,
P_V IN CP_VISTA.VERIFICACION_ADMIN%TYPE, CURSOR_GESTION OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN CURSOR_GESTION FOR
    SELECT * FROM CP_VISTA
    WHERE CERRAR_LOGIS = P_C AND VERIFICACION_ADMIN = P_V;
END;
/
CREATE PUBLIC SYNONYM P_SELECT_CRD_VFD FOR PR_SELECT_CRD_VFD;
/

create or replace PROCEDURE PR_SELECT_CT(P_NOMBRE CENTRO_TRABAJO.NOMBRE%TYPE, CONSULTA_CT OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN CONSULTA_CT FOR
    SELECT * FROM CENTRO_TRABAJO
    WHERE NOMBRE LIKE P_NOMBRE;
  COMMIT;
END;
/
CREATE PUBLIC SYNONYM P_SELECT_CT FOR PR_SELECT_CT;
/

create or replace PROCEDURE PR_SELECT_GESTION(P_FECHA IN CP_VISTA.FECHA%TYPE, P_C IN CP_VISTA.CERRAR_LOGIS%TYPE,
P_V IN CP_VISTA.VERIFICACION_ADMIN%TYPE, CURSOR_GESTION OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN CURSOR_GESTION FOR
    SELECT * FROM CP_VISTA
    WHERE FECHA = P_FECHA AND CERRAR_LOGIS = P_C AND VERIFICACION_ADMIN = P_V;
END;
/
CREATE PUBLIC SYNONYM P_SELECT_GESTION FOR PR_SELECT_GESTION;
/

create or replace PROCEDURE PR_SELECT_TRABAJADOR(P_NOMBRE IN TRABAJADOR.NOMBRE%TYPE, CURSOR_TRABAJADOR OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN CURSOR_TRABAJADOR FOR
    SELECT * FROM TRABAJADOR
    WHERE NOMBRE LIKE P_NOMBRE;
END;
/
CREATE PUBLIC SYNONYM P_SELECT_TRABAJADOR FOR PR_SELECT_TRABAJADOR;
/

create or replace PROCEDURE PR_SELECT_VEHICULO(P_MAT IN VEHICULO.MATRICULA%TYPE, CURSOR_VEHICULO OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN CURSOR_VEHICULO FOR
    SELECT * FROM VEHICULO
    WHERE MATRICULA LIKE P_MAT;
END;
/
CREATE PUBLIC SYNONYM P_SELECT_VEHICULO FOR PR_SELECT_VEHICULO;
/

--Creaci√≥n de las secuencias usadas para los ID de algunas tablas.
CREATE SEQUENCE ID_CENTRO 
  INCREMENT BY 10 START WITH 10 
  NOMAXVALUE
  MINVALUE 10;
  /
  
  CREATE SEQUENCE ID_TRABAJADOR 
  INCREMENT BY 1 START WITH 1 
  NOMAXVALUE
  MINVALUE 1;
  /
  
  CREATE SEQUENCE ID_CLAVE 
  INCREMENT BY 1 START WITH 1 
  NOMAXVALUE
  MINVALUE 1;
  /
  
  --DISPARADOR PARA PONER ID AL TRABAJADOR
create or replace TRIGGER T_ID_Trabajador
BEFORE INSERT
ON TRABAJADOR
FOR EACH ROW
BEGIN
:new.ID_TRABAJADOR := ID_TRABAJADOR.NEXTVAL;
END;
/


--DISPARADOR PARA PONER ID AL CENTRO TRABAJO
CREATE OR REPLACE TRIGGER T_ID_CT
BEFORE INSERT
ON CENTRO_TRABAJO
FOR EACH ROW
BEGIN
:new.ID_CENTRO := ID_CENTRO.NEXTVAL;
END;
/


--CUANDO SE INSERTE UN "TRABAJADOR" CREAR UN REGISTRO EN "CLAVE"
CREATE OR REPLACE TRIGGER INSERTAR_TRABAJADOR
AFTER INSERT
ON TRABAJADOR
FOR EACH ROW
BEGIN
  --INSERT INTO CLAVE VALUES (ID_CLAVE.NEXTVAL,:new.nombre,'himevico12345',SYSDATE,:new.id_trabajador);
   insertar_clave(:new.nombre, :new.id_trabajador);
END;
/

--DISPARADOR PARA SABER SI HAY EXCESO DE HORAS O NO
create or replace TRIGGER EXCESO_HORAS_AL_VERIFICAR
BEFORE INSERT OR UPDATE
ON CP
FOR EACH ROW
DECLARE
BEGIN
IF :NEW.EXCESO_HORAS BETWEEN 0 AND 539 THEN
:NEW.EXCESO_HORAS :=0
;
ELSE IF :NEW.EXCESO_HORAS BETWEEN 540 AND 599 THEN
:NEW.EXCESO_HORAS :=1
;
ELSE IF :NEW.EXCESO_HORAS BETWEEN 600 AND 659 THEN
:NEW.EXCESO_HORAS :=2
;
ELSE IF :NEW.EXCESO_HORAS BETWEEN 600 AND 659 THEN
:NEW.EXCESO_HORAS :=2
;
ELSE IF :NEW.EXCESO_HORAS BETWEEN 660 AND 719 THEN
:NEW.EXCESO_HORAS :=3
;
ELSE IF :NEW.EXCESO_HORAS BETWEEN 720 AND 779 THEN
:NEW.EXCESO_HORAS :=4
;
ELSE IF :NEW.EXCESO_HORAS BETWEEN 780 AND 839 THEN
:NEW.EXCESO_HORAS :=5
;
ELSE IF :NEW.EXCESO_HORAS BETWEEN 840 AND 899 THEN
:NEW.EXCESO_HORAS :=6
;
ELSE IF :NEW.EXCESO_HORAS BETWEEN 900 AND 959 THEN
:NEW.EXCESO_HORAS :=7
;
ELSE IF :NEW.EXCESO_HORAS BETWEEN 960 AND 1019 THEN
:NEW.EXCESO_HORAS :=8
;
ELSE IF :NEW.EXCESO_HORAS > 1020  THEN
:NEW.EXCESO_HORAS :=9999
;
END IF;
END IF;
END IF;
END IF;
END IF;
END IF;
END IF;
END IF;
END IF;
END IF;
END IF;
END;
/

--DISPARADOR PARA ACTUALIZAR LOS KM TOTALES DEL VEHICULO
CREATE OR REPLACE TRIGGER ACTUALIZAR_KM_TOTALES
AFTER INSERT OR UPDATE
ON CP
FOR EACH ROW
DECLARE
KMTOTAL NUMBER;
BEGIN 
	IF :NEW.CERRAR_LOGIS = 1 THEN
	KMTOTAL:= :NEW.KM_FINAL - :NEW.KM_INICIO;
    UPDATE  VEHICULO
	SET 
	KM_TOTALES = KM_TOTALES + KMTOTAL
	WHERE MATRICULA = :NEW.VEHICULO_MATRICULA;
	END IF;
END;
/

-- CREACI√ìN DE VISTAS

  CREATE OR REPLACE FORCE VIEW "SYSTEM"."AVISO_VISTA" ("FECHA_AVISO", "CP_FECHA", "NOMBRE", "APELLIDO_1", "TEXTO", "CP_TRABAJADOR_ID_TRABAJADOR", "TRABAJADOR_ID_TRABAJADOR") AS
  SELECT A.FECHA_AVISO, A.CP_FECHA, T.NOMBRE, T.APELLIDO_1, A.TEXTO, A.CP_TRABAJADOR_ID_TRABAJADOR, A.TRABAJADOR_ID_TRABAJADOR

FROM AVISO A, TRABAJADOR T

WHERE A.CP_TRABAJADOR_ID_TRABAJADOR = T.ID_TRABAJADOR;
/

CREATE OR REPLACE FORCE VIEW "SYSTEM"."CP_VISTA" ("FECHA", "KM_INICIO", "KM_FINAL", "GASTO_GASOIL", "GASTO_AUTOPISTA", "GASTO_DIETAS", "OTROS_GASTOS", "INCIDENCIAS_POSIBLES", "EXCESO_HORAS", "CERRAR_LOGIS", "VERIFICACION_ADMIN", "TRABAJADOR_ID_TRABAJADOR", "NOMBRE", "APELLIDO_1", "VEHICULO_MATRICULA", "CENTRO_TRABAJO_ID_CENTRO") AS
  SELECT CP.FECHA, CP.KM_INICIO, CP.KM_FINAL, CP.GASTO_GASOIL,
CP.GASTO_AUTOPISTA, CP.GASTO_DIETAS, CP.OTROS_GASTOS, CP.INCIDENCIAS_POSIBLES,
CP.EXCESO_HORAS, CP.CERRAR_LOGIS, CP.VERIFICACION_ADMIN,
CP.TRABAJADOR_ID_TRABAJADOR, TRABAJADOR.NOMBRE, TRABAJADOR.APELLIDO_1,
CP.VEHICULO_MATRICULA, TRABAJADOR.CENTRO_TRABAJO_ID_CENTRO

FROM CP, TRABAJADOR
WHERE CP.TRABAJADOR_ID_TRABAJADOR = TRABAJADOR.ID_TRABAJADOR;
/


  CREATE OR REPLACE FORCE VIEW "SYSTEM"."LP_VISTA" ("HORA_INICIO", "HORA_FINAL", "CP_FECHA", "CP_TRABAJADOR_ID_TRABAJADOR", "NOMBRE", "APELLIDO_1") AS
  SELECT LP.HORA_INICIO, LP.HORA_FINAL, LP.CP_FECHA,
LP.CP_TRABAJADOR_ID_TRABAJADOR, TRABAJADOR.NOMBRE, TRABAJADOR.APELLIDO_1
FROM LP, TRABAJADOR
WHERE LP.CP_TRABAJADOR_ID_TRABAJADOR = TRABAJADOR.ID_TRABAJADOR;
/