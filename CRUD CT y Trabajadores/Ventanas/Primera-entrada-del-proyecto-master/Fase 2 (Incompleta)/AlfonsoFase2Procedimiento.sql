-- CREAR UN CURSOR y FUNCIONA

SET SERVEROUTPUT ON
DECLARE
V_ID TRABAJADOR.ID_TRABAJADOR%TYPE;
V_DNI TRABAJADOR.DNI%TYPE;
CURSOR C_TRABAJADOR IS
SELECT ID_TRABAJADOR, DNI
FROM TRABAJADOR;
BEGIN
OPEN C_TRABAJADOR;
LOOP
FETCH C_TRABAJADOR INTO V_ID, V_DNI;
EXIT WHEN C_TRABAJADOR%NOTFOUND;
DBMS_OUTPUT.PUT_LINE(V_ID||'  '||V_DNI);
END LOOP;
CLOSE C_TRABAJADOR;
END;

-- OTRO CURSOR QUE FUNCIONA
DECLARE
   CURSOR c_nuevocursor
   IS
      SELECT nombre, apellido_1
        FROM trabajador;
BEGIN
   FOR x IN c_nuevocursor
   LOOP
      DBMS_OUTPUT.put_line (   'Nombre y apellido: '
                            || x.nombre
                            || ' '
                            || x.apellido_1
                           );
   END LOOP;
END;

-- PROCEDIMIENTO QUE DEVUELVE UN CURSOR Y QUE FUNCIONA
CREATE OR REPLACE PROCEDURE P_TR (ID_TRABAJADOR NUMBER)
IS
BEGIN
DECLARE
CURSOR C_TRAB IS
SELECT * FROM TRABAJADOR;
S TRABAJADOR%ROWTYPE;
BEGIN
OPEN C_TRAB;
DBMS_OUTPUT.PUT_LINE ('ID' ||' '||'DNI'||'      '||'NOMBRE'||'         '||'APELLIDO 1ยบ');
LOOP
FETCH C_TRAB INTO S;
EXIT WHEN C_TRAB%NOTFOUND;
DBMS_OUTPUT.PUT_LINE (S.ID_TRABAJADOR ||' '||S.DNI||' '||S.NOMBRE||' '||S.APELLIDO_1);
END LOOP;
CLOSE C_TRAB;
END;
END;

execute p_tr(0);




